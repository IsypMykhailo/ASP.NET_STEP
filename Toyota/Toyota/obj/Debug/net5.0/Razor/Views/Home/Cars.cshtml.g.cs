#pragma checksum "D:\ПРОГРАММИРОВАНИЕ\Программирование\ASP .NET\Toyota\Toyota\Views\Home\Cars.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "27b259893190ee861d321e25fcf27fe7d3c7b199"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Cars), @"mvc.1.0.view", @"/Views/Home/Cars.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "D:\ПРОГРАММИРОВАНИЕ\Программирование\ASP .NET\Toyota\Toyota\Views\_ViewImports.cshtml"
using Toyota;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\ПРОГРАММИРОВАНИЕ\Программирование\ASP .NET\Toyota\Toyota\Views\_ViewImports.cshtml"
using Toyota.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"27b259893190ee861d321e25fcf27fe7d3c7b199", @"/Views/Home/Cars.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"d20eaa3efef274dfb0cd425bd231ced5df79e5ad", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_Cars : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "D:\ПРОГРАММИРОВАНИЕ\Программирование\ASP .NET\Toyota\Toyota\Views\Home\Cars.cshtml"
  
    ViewData["Title"] = "Cars Page";

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n<div class=\"text-center\">\r\n    <h1 class=\"display-4\">Cars</h1>\r\n</div>\r\n<div id=\"navModels\">\r\n\r\n</div>\r\n\r\n<div id=\"mainModels\">\r\n\r\n</div>\r\n\r\n");
            DefineSection("Scripts", async() => {
                WriteLiteral(@"
    <script>

        let apiModels = ""/api/ApiModels"";
        let apiModifications = ""/Api/GetModifications"";
        let apiModificationColors = ""/Api/GetModificationColors"";
        let apiModificationColorsImg = ""/Api/GetModificationColorsImg"";

        function onError(err) {
            console.log(""Err"");
            console.log(err);
        }

        function renderModel(obj) {
            console.log(obj.id);
            fetch(apiModels + ""/"" + obj.id)
                .then(res => {
                    if (res.status !== 200) {
                        onError(res);
                        return;
                    }
                    // console.log(res);
                    return res.json();
                })
                .then(model => {
                    console.log(model);
                    //TODO: Построить отображение модельки
                    let mainModels = document.getElementById(""mainModels"");
                    let div = document.createEleme");
                WriteLiteral(@"nt(""div"");
                    div.classList.add(""border"");
                    div.classList.add(""p-3"");
                    let h3 = document.createElement(""h3"");
                    h3.innerText = model.name;
                    let img = document.createElement(""img"");
                    img.classList.add(""models_thumbs"");
                    img.src = model.imgUrl;
                    div.appendChild(h3);
                    div.appendChild(img);
                    mainModels.innerHTML = """";
                    mainModels.appendChild(div);
                    renderModification(model.id);
                })
                .catch(err => { onError(err); });
        }

        function renderModification(obj) {
            console.log(obj);
            fetch(apiModifications + ""/"" + obj)
                .then(res => {
                    if (res.status !== 200) {
                        onError(res);
                        return;
                    }
                    // cons");
                WriteLiteral(@"ole.log(res);
                    return res.json();
                })
                .then(modifications => {
                    console.log(modifications);
                    let mainModels = document.getElementById(""mainModels"");
                    let select = document.createElement(""select"");
                    select.classList.add(""form-select"");
                    for (let modification of modifications) {
                        let option = document.createElement(""option"");
                        option.value = modification.imgUrl;
                        option.dataset.id = modification.id;
                        option.innerText = modification.name;
                        select.appendChild(option);
                    }
                    mainModels.appendChild(select);
                    var div = document.createElement(""div"");
                    div.classList.add(""border"");
                    div.classList.add(""p-3"");
                    div.id = ""divColor"";
    ");
                WriteLiteral(@"                div.innerHTML = """";
                    var h4 = document.createElement(""h4"");
                    h4.innerHTML = select[select.selectedIndex].innerText + ""<br>"";
                    var img = document.createElement(""img"");
                    img.id = ""img-mod"";
                    img.classList.add(""modifications_thumbs"");
                    img.src = select[select.selectedIndex].value;
                    div.appendChild(h4);
                    div.appendChild(img);
                    mainModels.appendChild(div);
                    renderModificationColors(select[select.selectedIndex].dataset.id);
                    select.onchange = function (e) {
                        div.innerHTML = """";
                        h4.innerHTML = """";
                        h4.innerHTML = select[select.selectedIndex].innerText + ""<br>"";
                        img.src = """";
                        img.src = e.target.value;
                        div.appendChild(h4);
                 ");
                WriteLiteral(@"       div.appendChild(img);
                        renderModificationColors(select[select.selectedIndex].dataset.id);
                    }
                })
        }

        function renderModificationColors(obj) {
            console.log(obj);
            fetch(apiModificationColors + ""/"" + obj)
                .then(res => {
                    if (res.status !== 200) {
                        onError(res);
                        return;
                    }
                    // console.log(res);
                    return res.json();
                })
                .then(modificationColors => {
                    console.log(modificationColors);
                    let mainModels = document.getElementById(""mainModels"");
                    let divColor = document.getElementById(""divColor"");
                    let select = document.createElement(""select"");
                    select.id = ""select-color"";
                    select.classList.add(""form-select"");
         ");
                WriteLiteral(@"           for (let modificationColor of modificationColors) {
                        let option = document.createElement(""option"");
                        option.innerText = modificationColor.name;
                        option.value = modificationColor.id;
                        /*let img = document.getElementById(""img-mod"");
                        img.src = modificationColor.imgUrl;*/
                        renderModificationColorsImg(obj);
                        select.appendChild(option);
                    }
                    divColor.appendChild(select);
                    mainModels.appendChild(divColor);
                })
        }

        function renderModificationColorsImg(obj) {
            console.log(obj);
            fetch(apiModificationColorsImg + ""/"" + obj)
                .then(res => {
                    if (res.status !== 200) {
                        onError(res);
                        return;
                    }
                    // console.lo");
                WriteLiteral(@"g(res);
                    return res.json();
                })
                .then(modificationColors => {
                    console.log(modificationColors);
                    let mainModels = document.getElementById(""mainModels"");
                    let divColor = document.getElementById(""divColor"");
                    let select = document.getElementById(""select-color"");
                    for (let modificationColor of modificationColors) {
                        if (select[select.selectedIndex].value == modificationColor.colorId) {
                            let img = document.getElementById(""img-mod"");
                            img.src = modificationColor.imgUrl;
                        }
                    }
                    select.onchange = function (e) {
                        for (let modificationColor of modificationColors) {
                            if (select[select.selectedIndex].value == modificationColor.colorId) {
                                let img");
                WriteLiteral(@" = document.getElementById(""img-mod"");
                                img.src = modificationColor.imgUrl;
                            }
                        }
                    }
                })
        }

        function renderModelsNav(models) {
            //console.log(models);
            let div = document.getElementById(""navModels"");
            div.innerHTML = """";
            div.classList.add(""dropdown"");

            div.innerHTML = ""<button class='btn btn-secondary dropdown-toggle' type='button' id='dropdownMenuButton1' data-bs-toggle='dropdown' aria-expanded='false'>""+
                ""Car Models</button > <ul id='ul-dropdown' class='dropdown-menu' aria-labelledby='dropdownMenuButton1'></ul>""
            let ul = document.getElementById(""ul-dropdown"");
            models.map(model => {
                // console.log(model);
                let li = document.createElement(""li"");
                li.classList.add(""dropdown-item"");
                li.innerText = model.na");
                WriteLiteral(@"me;
                li.id = model.id;
                li.onclick = function () {
                    renderModel(this);
                }
                ul.appendChild(li);
            })
        }

        function getAllModels() {
            fetch(apiModels)
                .then(res => {
                    if (res.status !== 200) {
                        onError(res);
                        return;
                    }
                    return res.json();
                })
                .then(models => {
                    renderModelsNav(models);
                })
                .catch(err => { onError(err); });
        }

        getAllModels();


    </script>
");
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
