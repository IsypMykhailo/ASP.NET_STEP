#pragma checksum "D:\ПРОГРАММИРОВАНИЕ\Программирование\ASP .NET\Toyota\Toyota\Views\Home\Cars.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "16221c5beaa0fb4342909282d8bce3e9ef83a582"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Cars), @"mvc.1.0.view", @"/Views/Home/Cars.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "D:\ПРОГРАММИРОВАНИЕ\Программирование\ASP .NET\Toyota\Toyota\Views\_ViewImports.cshtml"
using Toyota;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\ПРОГРАММИРОВАНИЕ\Программирование\ASP .NET\Toyota\Toyota\Views\_ViewImports.cshtml"
using Toyota.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"16221c5beaa0fb4342909282d8bce3e9ef83a582", @"/Views/Home/Cars.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"d20eaa3efef274dfb0cd425bd231ced5df79e5ad", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_Cars : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "D:\ПРОГРАММИРОВАНИЕ\Программирование\ASP .NET\Toyota\Toyota\Views\Home\Cars.cshtml"
  
    ViewData["Title"] = "Cars Page";

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n<div class=\"text-center\">\r\n    <h1 class=\"display-4\">Cars</h1>\r\n</div>\r\n<div id=\"navModels\">\r\n    Тут будут ссылки ан название моделей\r\n</div>\r\n\r\n<div id=\"mainModels\">\r\n    Тут будет активная модель\r\n</div>\r\n\r\n");
            DefineSection("Scripts", async() => {
                WriteLiteral(@"
    <script>

        let apiModels = ""/api/ApiModels"";

        function onError(err) {
            console.log(""Err"");
            console.log(err);
        }

        function renderModel(obj) {
            console.log(obj.id);
            fetch(apiModels + ""/"" + obj.id)
                .then(res => {
                    if (res.status !== 200) {
                        onError(res);
                        return;
                    }
                    // console.log(res);
                    return res.json();
                })
                .then(model => {
                    console.log(model);
                    //TODO: Построить отображение модельки
                    let div = document.getElementById(""mainModels"");
                    div.innerHTML = """";
                    let img = document.createElement(""img"");
                    img.classList.add(""admin_models_thumbs"");
                    img.src = model.imgUrl;
                    div.appendChild(img);
");
                WriteLiteral(@"                })
                .catch(err => { onError(err); });
        }

        function renderModelsNav(models) {
            //console.log(models);
            let div = document.getElementById(""navModels"");
            div.innerHTML = """";
            let ul = document.createElement(""ul"");

            models.map(model => {
                // console.log(model);
                let li = document.createElement(""li"");
                li.innerText = model.name;
                li.id = model.id;
                li.onclick = function () {
                    renderModel(this);
                }
                ul.appendChild(li);
            })
            div.appendChild(ul);
        }

        function getAllModels() {
            fetch(apiModels)
                .then(res => {
                    if (res.status !== 200) {
                        onError(res);
                        return;
                    }
                    // console.log(res);
                  ");
                WriteLiteral("  return res.json();\r\n                })\r\n                .then(models => {\r\n                    renderModelsNav(models);\r\n                })\r\n                .catch(err => { onError(err); });\r\n        }\r\n\r\n        getAllModels();\r\n\r\n\r\n    </script>\r\n");
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
